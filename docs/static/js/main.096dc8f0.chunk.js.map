{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","bSort","arr","key","i","length","j","temp","reverseBSort","App","props","reverse","state","languages","setState","lan","count","this","className","onClick","map","language","increment","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,8JCK3C,SAASC,EAAMC,EAAKC,GAClB,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC7B,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAIG,OAAOD,EAAE,EAAGE,IACjC,GAAGJ,EAAII,GAAGH,GAAOD,EAAII,EAAE,GAAGH,GAAM,CAC9B,IAAII,EAAOL,EAAII,GACfJ,EAAII,GAAKJ,EAAII,EAAE,GACfJ,EAAII,EAAE,GAAKC,GAOnB,SAASC,EAAaN,EAAKC,GACzB,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC7B,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAIG,OAAOD,EAAE,EAAGE,IACjC,GAAGJ,EAAII,GAAGH,GAAOD,EAAII,EAAE,GAAGH,GAAM,CAC9B,IAAII,EAAOL,EAAII,GACfJ,EAAII,GAAKJ,EAAII,EAAE,GACfJ,EAAII,EAAE,GAAKC,G,IAkFJE,E,YAtEb,WAAYC,GAAQ,IAAD,8BACjB,+CA0BFC,QAAU,WACR,IAAIJ,EAAI,YAAO,EAAKK,MAAMC,WAC1B,EAAKC,SAAS,CAACH,SAAW,EAAKC,MAAMD,UAAU,WAC1C,EAAKC,MAAMD,QACZH,EAAaD,EAAM,SAGnBN,EAAMM,EAAM,SAEd,EAAKO,SAAS,CAACD,UAAYN,QAlC7B,EAAKK,MAAQ,CACXC,UAAY,CACV,CAACE,IAAM,OAAQC,MAAQ,GACvB,CAACD,IAAM,aAAcC,MAAQ,GAC7B,CAACD,IAAK,SAAUC,MAAQ,GACxB,CAACD,IAAM,KAAMC,MAAQ,IAEvBL,SAAU,GATK,E,uEAaTP,GAER,IAAIG,EAAI,YAAOU,KAAKL,MAAMC,WAC1BN,EAAKH,GAAGY,QAELC,KAAKL,MAAMD,QACZH,EAAaD,EAAM,SAGnBN,EAAMM,EAAM,SAEdU,KAAKH,SAAS,CAACD,UAAYN,M,+BAkBnB,IAAD,OAEP,OACE,oCACA,yBAAKW,UAAU,QACb,oDACA,4BAAQA,UAAU,UAAUC,QAASF,KAAKN,SAA1C,iBACA,+BACE,gCAEA,+BAEEM,KAAKL,MAAMC,UAAUO,KAAI,SAACC,EAAUjB,GAAX,OACvB,wBAAID,IAAKC,GACP,4BAAKiB,EAASL,OACd,4BAAKK,EAASN,KACd,4BAAI,4BAAQG,UAAU,QAAQC,QAAS,EAAKG,UAAUC,KAAK,EAAMnB,kB,GA3D/DoB,aCvBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.096dc8f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nfunction bSort(arr, key) {\n  for(let i = 0; i < arr.length; i++ ) {\n    for(let j = 0; j < arr.length-i-1; j++) {\n      if(arr[j][key] < arr[j+1][key]) {\n        let temp = arr[j];\n        arr[j] = arr[j+1]\n        arr[j+1] = temp;\n      }\n    }\n  }\n}\n\n\nfunction reverseBSort(arr, key) {\n  for(let i = 0; i < arr.length; i++ ) {\n    for(let j = 0; j < arr.length-i-1; j++) {\n      if(arr[j][key] > arr[j+1][key]) {\n        let temp = arr[j];\n        arr[j] = arr[j+1]\n        arr[j+1] = temp;\n      }\n    }\n  }\n}\n\n\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      languages : [\n        {lan : 'java', count : 0},\n        {lan : 'JavaScript', count : 0 },\n        {lan :'python', count : 0},\n        {lan : 'c#', count : 0}\n      ],\n      reverse : false,\n    }\n  }//end constructor\n\n  increment(i) {\n    //added code\n    let temp = [...this.state.languages];\n    temp[i].count++;\n\n    if(this.state.reverse) {\n      reverseBSort(temp, 'count');\n    }\n    else{\n      bSort(temp, 'count');\n    }\n    this.setState({languages : temp});\n  }//end increment\n\n  reverse = () => {\n    let temp = [...this.state.languages];\n    this.setState({reverse : !this.state.reverse}, () => {\n      if(this.state.reverse) {\n        reverseBSort(temp, 'count');\n      }\n      else{\n        bSort(temp, 'count');\n      }\n      this.setState({languages : temp});\n    });\n    \n  }\n\n\n  render() {\n\n    return (\n      <>\n      <div className=\"main\">\n        <h1>VOTE YOUR JS LIBRARY</h1>\n        <button className=\"reverse\" onClick={this.reverse}>reverse Order</button>\n        <table>\n          <thead>\n          </thead>\n          <tbody>\n            {\n            this.state.languages.map((language, i) => (\n              <tr key={i}>\n                <td>{language.count}</td>\n                <td>{language.lan}</td>\n                <td><button className='butts' onClick={this.increment.bind(this, i)}></button></td>\n              </tr>\n              ))\n            }\n          </tbody>  \n        </table>  \n      </div>\n\n      </>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css' \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}